/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package form_tampilan;

import static csv.read_excel.import_data;
import java.awt.Color;
import java.awt.Font;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVRecord;
import perhitungan_forward_chaining.pencarian_forward_chaining;
import tugas_akhir.halaman_awal;
import perhitungan_dempster.perhitungan_dempster_shafer;
import csv.read_excel;

/**
 *
 * @author mantaps
 */
public class diagnosa_kerusakan extends javax.swing.JPanel {

    /**
     * Creates new form diagnosa_kerusakan
     */
    public diagnosa_kerusakan() {
        initComponents();
        //membuat tabel gejala
        Iterable<CSVRecord> records = import_data();
        String namagejala[][] = new String [100][2];        
        
        int indeks = 0;
        for(CSVRecord record : records){
            namagejala[indeks][0] = record.get("No");
            namagejala[indeks][1] = record.get("gejala");
            indeks++;
        }
        
        String namagejalas[][] = new String [indeks][2];
        for(int i=0;i<namagejalas.length;i++){
            namagejalas[i][0] = namagejala[i][0];            
            namagejalas[i][1] = namagejala[i][1];
        }
        
        DefaultTableModel tblModel = (DefaultTableModel)jTable1.getModel();
        for(String[] row : namagejalas){
                tblModel.addRow(row);
        } 
        
        jTable1.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 24));
        jTable1.getTableHeader().setOpaque(false);
        jTable1.getTableHeader().setBackground(new Color(32,136,203));
        jTable1.setRowHeight(45);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        diagnosa = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        nilai = new javax.swing.JTextField();
        kerusakan1 = new javax.swing.JTextField();

        jTable1.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "Gejala", "pilih"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setFocusable(false);
        jTable1.setIntercellSpacing(new java.awt.Dimension(0, 0));
        jTable1.setRowHeight(45);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMaxWidth(50);
            jTable1.getColumnModel().getColumn(2).setMinWidth(10);
            jTable1.getColumnModel().getColumn(2).setMaxWidth(100);
        }

        diagnosa.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        diagnosa.setText("Diagnosa");
        diagnosa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                diagnosaActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jButton2.setText("clear");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Diagnosa");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Nilai ");

        nilai.setEditable(false);
        nilai.setFont(new java.awt.Font("Tahoma", 1, 22)); // NOI18N
        nilai.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        kerusakan1.setEditable(false);
        kerusakan1.setFont(new java.awt.Font("Tahoma", 1, 22)); // NOI18N
        kerusakan1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1031, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(diagnosa, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nilai)
                                    .addComponent(kerusakan1))))
                        .addGap(458, 458, 458)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(diagnosa, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(kerusakan1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nilai, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)))
                    .addComponent(jLabel1))
                .addGap(59, 59, 59))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void diagnosaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diagnosaActionPerformed
        // TODO add your handling code here:
        String hapushasil [] = {" "};
        kerusakan1.setText("");
        nilai.setText("");
        
        Iterable<CSVRecord> records = import_data();
        
         //memindahkan dataset dari csv kedalam array
        String gejala_convert[] = new String [100];
        String bobot_convert[] = new String [100];
        String kerusakan_convert[] = new String [100];
        
        
        int indeks = 0;
        for(CSVRecord record : records){
            gejala_convert[indeks] = record.get("kerusakan_gejala"); 
            bobot_convert[indeks] = record.get("nilai_bobot");
            kerusakan_convert[indeks] = record.get("kerusakan");
            indeks++;
        }             
        
        //mmecah gejala dan bobot yang masih dalam bentuk koma dengan split
        String gejalasplit[][] = new String[100][100];
        String bobotsplit[][] = new String[100][100];   
        
        for(int i=0;i<gejalasplit.length;i++){
            if(gejala_convert[i]!=null){
                String gejalasplitawal[] = gejala_convert[i].split(",");
                String bobotsplitawal[] = bobot_convert[i].split(","); 
                for(int j=0;j<gejalasplitawal.length;j++){
                    gejalasplit[i][j] = gejalasplitawal[j];
                    bobotsplit[i][j] = bobotsplitawal[j]; 
                }
            }
        }
        
        
        //convert dari string menjadi numerik
        int gejala_lengkap[][] = new int [gejalasplit.length][gejalasplit.length];   
        double bobot_lengkap[][] = new double [bobotsplit.length][bobotsplit.length];
        
        for(int i=0;i<gejala_lengkap.length;i++){
            for(int j=0;j<gejala_lengkap.length;j++){
                if(gejalasplit[i][j] != null){
                    gejala_lengkap[i][j] = Integer.parseInt(gejalasplit[i][j]);
                    bobot_lengkap[i][j] = Double.parseDouble(bobotsplit[i][j]);
                }
            }
        }        
                 
        int gejala_dipilih [][] = new int [100][100];
        double bobot_dipilih [][] = new double [100][100];
        
        int kerusakansementara [] = new int [10];
        int indekskerusakansementara = 0;            
        
        //menyimpan array gejala yang telah dipilih
        int indeksgejalas = 0;
        for(int i=0;i<jTable1.getRowCount();i++){
            if(jTable1.getValueAt(i, 2) != null){                
                if(jTable1.getValueAt(i, 2).toString() == "true"){
                    for(int j=0;j<gejalasplit[i].length;j++){
                        kerusakansementara [indeksgejalas] = i+1;
                        gejala_dipilih[indeksgejalas][j] = gejala_lengkap[i][j];
                        bobot_dipilih[indeksgejalas][j] = bobot_lengkap[i][j];                        
                    }
                indeksgejalas++;
                }
                else if(jTable1.getValueAt(i, 2).toString() == "false"){
                    for(int j=0;j<gejala_lengkap[i].length;j++){
                        gejala_dipilih[indeksgejalas][j] = 0;
                        bobot_dipilih[indeksgejalas][j] = 0;
                    }
                }
            }
        }
        
        // print forward chaining
        pencarian_forward_chaining pencarian_forward_chaining = new pencarian_forward_chaining();
        String diagnosa_forward_chaining = pencarian_forward_chaining.pencarian_forward_chaining(kerusakansementara,kerusakan_convert);
        
        if(diagnosa_forward_chaining == null){
            //kerusakan.setText("tidak ada kerusakan yang cocok dari gejala yang dipilih");
        }
        if(diagnosa_forward_chaining != null){
            /*for(int i=0;i<diagnosa_forward_chaining.length;i++){
                kerusakan.setListData(diagnosa_forward_chaining);
            }*/
            kerusakan1.setText(diagnosa_forward_chaining);
        }
         
        // print hasil dempster shafer
        if(gejala_dipilih[0][0] != 0 /*&& diagnosa_forward_chaining.length > 0*/){
            perhitungan_dempster_shafer diagnosa_kerusakan_hitung_nilai = new perhitungan_dempster_shafer();
            double bobot_akhir = diagnosa_kerusakan_hitung_nilai.perhitungan_gejala(gejala_dipilih,bobot_dipilih);

            if(diagnosa_forward_chaining != null && bobot_akhir != 0){ 
                nilai.setText(bobot_akhir * 100+"%");
            }  
            else if(diagnosa_forward_chaining == null){       
                kerusakan1.setText("");
                JOptionPane.showMessageDialog(this, "Tidak ada kerusakan yang cocok \nSilahkan Pilih Gejala");
            }
        }        
        
        // print apabila tidak ada data yang dipilih
        if(kerusakansementara[0]==0){
            JOptionPane.showMessageDialog(this, "Tidak ada kerusakan yang cocok \nSilahkan Pilih Gejala");
        }   
    
    
    }//GEN-LAST:event_diagnosaActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        for(int i=0;i<jTable1.getRowCount();i++){
            jTable1.setValueAt(null , i, 2);
        }
        String hapushasil [] = {" "};
        kerusakan1.setText("");
        nilai.setText("");
        
    }//GEN-LAST:event_jButton2ActionPerformed
    protected void paintChildren(Graphics grphcs){
        Graphics2D g2=(Graphics2D) grphcs;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING , RenderingHints.VALUE_ANTIALIAS_ON);
        GradientPaint g = new GradientPaint(0, 0, Color.decode("#2980b9"), 0, getHeight(), Color.decode("#2c3e50"));
        g2.setPaint(g);
        g2.fillRoundRect(0, 0, getWidth(), getHeight(), 15, 15);
        super.paintChildren(grphcs);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton diagnosa;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField kerusakan1;
    private javax.swing.JTextField nilai;
    // End of variables declaration//GEN-END:variables
}
